<?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Contracts\View\Factory;
use App\Todo;
use App\User;
use App\Http\Controllers\TodosController;
use \Mockery as m;


class TodoTest extends \TestCase
{
    // ミドルウェアを通さない
    // ここではログインを省略するのが目的
    use WithoutMiddleware;

    /**
     * @var \App\Todo
     */
    protected $todoMock;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->todoMock = m::mock(Todo::class);
        // 本物のTodoクラスを参照しないようにする
        App::instance(Todo::class, $this->todoMock);
        $this->user = new User();
        $this->user->id = 1;
    }

    public function tearDown()
    {
        m::close();
    }


    public function testIndex()
    {
        // user id をモックして返す
        // \Auth::shouldReceive('check')->andReturn(true);
        \Auth::shouldReceive('user')
            ->withNoArgs()
            ->once()
            ->andReturn($this->user);

        $this->todoMock
            ->shouldReceive('getTodos')
            ->with($this->user->id, Todo::STATUS_INCOMPLETE)
            ->andReturn('incompleteTodo')
            ->once();

        $this->todoMock
            ->shouldReceive('getTodos')
            ->with($this->user->id, Todo::STATUS_COMPLETED)
            ->andReturn('completedTodo')
            ->once();

        $this->todoMock
            ->shouldReceive('getTrashed')
            ->with($this->user->id)
            ->andReturn('trashedTodo')
            ->once();

        // User無しで動作しているため、実際にviewに渡らないようにモックする
        // with の第三引数は\Viewがデフォルトで空の配列を返すため
        \View::shouldReceive('make')
            ->with('todos.index', [
                'incompleteTodos' => 'incompleteTodo',
                'completedTodos' => 'completedTodo',
                'trashedTodos' => 'trashedTodo'
            ], []);

        $this->call('GET', '/todos');
    }

    public function testSuccessStore()
    {
        \Auth::shouldReceive('user')
            ->withNoArgs()
            ->once()
            ->andReturn($this->user);

        // createが一回呼ばれることをテスト
        $this->todoMock
            ->shouldReceive('create')
            ->with([
                'title' => 'hoge',
                'status' => Todo::STATUS_INCOMPLETE,
                'user_id' => $this->user->id
            ])
            ->once();

        \Redirect::shouldReceive('route')
            ->with('todos.index');

        $this->call('POST', '/todos', ['title' => 'hoge']);
    }

    public function testErrorStore()
    {
        \Auth::shouldReceive('user')
            ->withNoArgs()
            ->once()
            ->andReturn($this->user);

        // create が一度の呼ばれないことをテスト
        $this->todoMock
            ->shouldReceive('create')
            ->with([])
            ->never();

        $this->call('POST', '/todos', ['title' => 'NG']);
    }

    public function testSuccessUpdate()
    {
        $mockInstanceForFillMethod = m::mock(Todo::class);
        $mockInstanceForSaveMethod = m::mock(Todo::class);

        $this->todoMock
            ->shouldReceive('find')
            ->with(1)
            ->once()
            ->andReturn($mockInstanceForFillMethod);

        $mockInstanceForFillMethod
            ->shouldReceive('fill')
            ->with([
                'status' => 2,
                'completed_at' => new DateTime,
            ])
            ->once()
            ->andReturn($mockInstanceForSaveMethod);

        $mockInstanceForSaveMethod
            ->shouldReceive('save')
            ->withNoArgs()
            ->once();

        $this->call('POST', '/todos/1/update', ['status' => 2]);
    }

    public function testSuccessAjaxUpdateTitle()
    {
        $mockInstanceForFillMethod = m::mock(Todo::class);
        $mockInstanceForSaveMethod = m::mock(Todo::class);

        $this->todoMock
            ->shouldReceive('find')
            ->with(1)
            ->once()
            ->andReturn($mockInstanceForFillMethod);

        $mockInstanceForFillMethod
            ->shouldReceive('fill')
            ->with(['title' => 'hoge'])
            ->once()
            ->andReturn($mockInstanceForSaveMethod);

        $mockInstanceForSaveMethod
            ->shouldReceive('save')
            ->withNoArgs()
            ->once();

        $this->call('PUT', 'todos/1/title', ['title' => 'hoge']);
    }

    public function testErrorAjaxUpdateTitle()
    {
        $mockInstanceForErrorValidation = m::mock(Todo::class);
        $this->todoMock
            ->shouldReceive('find')
            ->with(1)
            ->once()
            ->andReturn($mockInstanceForErrorValidation);

        $mockInstanceForErrorValidation
            ->shouldReceive('fill')
            ->with([])
            ->never();

        $mockInstanceForErrorValidation
            ->shouldReceive('save')
            ->withNoArgs()
            ->never();

        $this->call('PUT', 'todos/1/title', ['title' => 'NG']);
    }

    public function testDelete()
    {
        $mockInstanceForDeleteMethod = m::mock(Todo::class);
        $this->todoMock
            ->shouldReceive('find')
            ->with(1)
            ->once()
            ->andReturn($mockInstanceForDeleteMethod);

        $mockInstanceForDeleteMethod
            ->shouldReceive('delete')
            ->withNoArgs()
            ->once();

        $this->call('POST', 'todos/1/delete');
    }

//    use DatabaseMigrations;
//
//    public function testGetIncompleteTodos()
//    {
//        $this->call('GET', '/todos');
//        factory(App\Todo::class)->create(['status' => 1]);
//        $incompleteTodo = \App\Todo::all();
//
//        $this->assertViewHas('incompleteTodos', $incompleteTodo);
//    }
//
//    public function testGetCompletedTodos()
//    {
//        $this->visit('/todos');
//        factory(\App\Todo::class)->create(['status' => 2]);
//        $completedTodo = \App\Todo::all();
//
//        $this->assertViewHas('completedTodos', $completedTodo);
//    }
//
//    public function testGetTrashedTodos()
//    {
//        $this->visit('/todos');
//        factory(\App\Todo::class)->create(['deleted_at' => new DateTime()]);
//        $trashedTodo = \App\Todo::all();
//
//        $this->assertViewHas('trashedTodos', $trashedTodo);
//    }
//
//
//    public function testCreate()
//    {
//        $todo = factory(App\Todo::class)->make(['status' => 1]);
//
//        $this->visit('/todos')
//            ->type($todo->title, 'title')
//            ->press('追加');
//
//        $this->seeInDatabase('todos', [
//            'title' => $todo->title,
//            'status' => $todo->status,
//            'created_at' => $todo->created_at,
//            'updated_at' => $todo->updated_at,
//        ]);
//    }
//
//    public function testDelete()
//    {
////        $todo = factory(\App\Todo::class)->create(['title' => 'hoge']);
//        $todo = \App\Todo::create([
//            'title' => 'title',
//            'status' => 1,
//        ]);
//        if (\App\Todo::count() != 1) {
//            $this->assertFalse('no data');
//        }
//
//        $this->route('POST', 'todos.delete', ['id' => $todo->id])
//            ->isRedirection();
//
//        if (\App\Todo::count() != 0) {
//            $this->assertFalse('don`t delete data');
//        }
//
//    }

}