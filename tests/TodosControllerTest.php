<?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Contracts\View\Factory;
use App\Todo;
use App\User;
use \Mockery as m;


class TodosControllerTest extends \TestCase
{
    // ミドルウェアを通さない
    // ここではログインを省略するのが目的
    use WithoutMiddleware;

    /**
     * @var \App\Todo
     */
    protected $todoMock;

    /**
     * @var \Request
     */
    protected $requestMock;

    /**
     * @var \App\User
     */
    protected $user;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->todoMock = m::mock(Todo::class);

        $this->user = new User();
        $this->user->id = 1;
        \Auth::shouldReceive('user')
            ->withNoArgs()
            ->once()
            ->andReturn($this->user);

        // 本物のTodoクラスを参照しないようにする
        App::instance(Todo::class, $this->todoMock);
    }

    public function tearDown()
    {
        m::close();
    }


    public function testIndex()
    {
        $this->todoMock
            ->shouldReceive('getTodos')
            ->with($this->user->id, Todo::STATUS_INCOMPLETE)
            ->andReturn('incompleteTodo')
            ->once();

        $this->todoMock
            ->shouldReceive('getTodos')
            ->with($this->user->id, Todo::STATUS_COMPLETED)
            ->andReturn('completedTodo')
            ->once();

        $this->todoMock
            ->shouldReceive('getTrashed')
            ->with($this->user->id)
            ->andReturn('trashedTodo')
            ->once();

        // User無しで動作しているため、実際にviewに渡らないようにモックする
        // with の第三引数は\Viewがデフォルトで空の配列を返すため
        \View::shouldReceive('make')
            ->with('todos.index', [
                'incompleteTodos' => 'incompleteTodo',
                'completedTodos' => 'completedTodo',
                'trashedTodos' => 'trashedTodo'
            ], []);

        $this->call('GET', '/todos');
    }

    public function testSuccessStore()
    {
        // createが一回呼ばれることをテスト
        $this->todoMock
            ->shouldReceive('create')
            ->with([
                'title' => 'hoge',
                'status' => Todo::STATUS_INCOMPLETE,
                'user_id' => $this->user->id
            ])
            ->once();

        \Redirect::shouldReceive('route')
            ->with('todos.index');

        $this->call('POST', '/todos', ['title' => 'hoge']);
    }

    public function testErrorStore()
    {
        // create が一度の呼ばれないことをテスト
        $this->todoMock
            ->shouldReceive('create')
            ->with([])
            ->never();

        $this->call('POST', '/todos', ['title' => 'NG']);
    }

    public function testSuccessUpdate()
    {
        $mockInstanceForFillMethod = m::mock(Todo::class);
        $mockInstanceForSaveMethod = m::mock(Todo::class);

        $mockInstanceForFillMethod
            ->shouldReceive('getAttribute')
            ->andReturn(1);

        $this->todoMock
            ->shouldReceive('find')
            ->with(1)
            ->once()
            ->andReturn($mockInstanceForFillMethod);

        $mockInstanceForFillMethod
            ->shouldReceive('fill')
            ->with([
                'status' => 2,
                'completed_at' => new DateTime,
            ])
            ->once()
            ->andReturn($mockInstanceForSaveMethod);

        $mockInstanceForSaveMethod
            ->shouldReceive('save')
            ->withNoArgs()
            ->once();

        $this->call('POST', '/todos/1/update', ['status' => 2]);
    }

    public function testSuccessAjaxUpdateTitle()
    {
        $mockInstanceForFillMethod = m::mock(Todo::class);
        $mockInstanceForSaveMethod = m::mock(Todo::class);

        $this->todoMock
            ->shouldReceive('find')
            ->with(1)
            ->once()
            ->andReturn($mockInstanceForFillMethod);

        $mockInstanceForFillMethod
            ->shouldReceive('fill')
            ->with(['title' => 'hoge'])
            ->once()
            ->andReturn($mockInstanceForSaveMethod);

        $mockInstanceForSaveMethod
            ->shouldReceive('save')
            ->withNoArgs()
            ->once();

        $this->call('PUT', 'todos/1/title', ['title' => 'hoge']);
    }

    public function testErrorAjaxUpdateTitle()
    {
        $mockInstanceForErrorValidation = m::mock(Todo::class);
        $this->todoMock
            ->shouldReceive('find')
            ->with(1)
            ->once()
            ->andReturn($mockInstanceForErrorValidation);

        $mockInstanceForErrorValidation
            ->shouldReceive('fill')
            ->with([])
            ->never();

        $mockInstanceForErrorValidation
            ->shouldReceive('save')
            ->withNoArgs()
            ->never();

        $this->call('PUT', 'todos/1/title', ['title' => 'NG']);
    }

    public function testDelete()
    {
        $mockInstanceForDeleteMethod = m::mock(Todo::class);

        $mockInstanceForDeleteMethod
            ->shouldReceive('getAttribute')
            ->andReturn(1);

        $this->todoMock
            ->shouldReceive('find')
            ->with(1)
            ->once()
            ->andReturn($mockInstanceForDeleteMethod);

        $mockInstanceForDeleteMethod
            ->shouldReceive('delete')
            ->withNoArgs()
            ->once();

        $this->call('POST', 'todos/1/delete');
    }

}